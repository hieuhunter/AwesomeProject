{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar KeyboardManager = function (_React$Component) {\n  (0, _inherits2.default)(KeyboardManager, _React$Component);\n\n  var _super = _createSuper(KeyboardManager);\n\n  function KeyboardManager() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, KeyboardManager);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"previouslyFocusedTextInput\", undefined);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"startTimestamp\", 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"keyboardTimeout\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"clearKeyboardTimeout\", function () {\n      if (_this.keyboardTimeout !== undefined) {\n        clearTimeout(_this.keyboardTimeout);\n        _this.keyboardTimeout = undefined;\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlePageChangeStart\", function () {\n      if (!_this.props.enabled) {\n        return;\n      }\n\n      _this.clearKeyboardTimeout();\n\n      var input = _reactNative.TextInput.State.currentlyFocusedInput ? _reactNative.TextInput.State.currentlyFocusedInput() : _reactNative.TextInput.State.currentlyFocusedField();\n\n      _reactNative.TextInput.State.blurTextInput(input);\n\n      _this.previouslyFocusedTextInput = input;\n      _this.startTimestamp = Date.now();\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlePageChangeConfirm\", function (force) {\n      if (!_this.props.enabled) {\n        return;\n      }\n\n      _this.clearKeyboardTimeout();\n\n      if (force) {\n        _reactNative.Keyboard.dismiss();\n      } else {\n        var input = _this.previouslyFocusedTextInput;\n\n        if (input) {\n          _reactNative.TextInput.State.blurTextInput(input);\n        }\n      }\n\n      _this.previouslyFocusedTextInput = undefined;\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlePageChangeCancel\", function () {\n      if (!_this.props.enabled) {\n        return;\n      }\n\n      _this.clearKeyboardTimeout();\n\n      var input = _this.previouslyFocusedTextInput;\n\n      if (input) {\n        if (Date.now() - _this.startTimestamp < 100) {\n          _this.keyboardTimeout = setTimeout(function () {\n            _reactNative.TextInput.State.focusTextInput(input);\n\n            _this.previouslyFocusedTextInput = undefined;\n          }, 100);\n        } else {\n          _reactNative.TextInput.State.focusTextInput(input);\n\n          _this.previouslyFocusedTextInput = undefined;\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(KeyboardManager, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearKeyboardTimeout();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children({\n        onPageChangeStart: this.handlePageChangeStart,\n        onPageChangeConfirm: this.handlePageChangeConfirm,\n        onPageChangeCancel: this.handlePageChangeCancel\n      });\n    }\n  }]);\n  return KeyboardManager;\n}(React.Component);\n\nexports.default = KeyboardManager;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;IAaqBA,e;;;;;EAA+C;IAAA;;IAAA;;IAAA;MAAAC;IAAA;;IAAA;;IAAAC,2FAOnBC,SAPmB;;IAAAD,+EAQjC,CARiC;;IAAAA;;IAAAA,qFAWnC,YAAM;MACnC,IAAI,MAAKE,eAAL,KAAyBD,SAA7B,EAAwC;QACtCE,YAAY,CAAC,MAAKD,eAAN,CAAZC;QACA,MAAKD,eAAL,GAAuBD,SAAvB;MACD;IAf+D;;IAAAD,sFAkBlC,YAAM;MACpC,IAAI,CAAC,MAAKI,KAAL,CAAWC,OAAhB,EAAyB;QACvB;MACD;;MAED,MAAKC,oBAAL;;MAGA,IAAMC,KAAe,GAAGC,uBAAUC,KAAVD,CAAgBE,qBAAhBF,GACpBA,uBAAUC,KAAVD,CAAgBE,qBAAhBF,EADoBA,GAEpBA,uBAAUC,KAAVD,CAAgBG,qBAAhBH,EAFJ;;MAKAA,uBAAUC,KAAVD,CAAgBI,aAAhBJ,CAA8BD,KAA9BC;;MAGA,MAAKK,0BAAL,GAAkCN,KAAlC;MAGA,MAAKO,cAAL,GAAsBC,IAAI,CAACC,GAALD,EAAtB;IArCgE;;IAAAf,wFAwC/BiB,eAAD,EAAoB;MACpD,IAAI,CAAC,MAAKb,KAAL,CAAWC,OAAhB,EAAyB;QACvB;MACD;;MAED,MAAKC,oBAAL;;MAEA,IAAIW,KAAJ,EAAW;QAITC,sBAASC,OAATD;MAJF,OAKO;QACL,IAAMX,KAAK,GAAG,MAAKM,0BAAnB;;QAEA,IAAIN,KAAJ,EAAW;UAGTC,uBAAUC,KAAVD,CAAgBI,aAAhBJ,CAA8BD,KAA9BC;QACD;MAnBiD;;MAuBpD,MAAKK,0BAAL,GAAkCZ,SAAlC;IA/DgE;;IAAAD,uFAkEjC,YAAM;MACrC,IAAI,CAAC,MAAKI,KAAL,CAAWC,OAAhB,EAAyB;QACvB;MACD;;MAED,MAAKC,oBAAL;;MAGA,IAAMC,KAAK,GAAG,MAAKM,0BAAnB;;MAEA,IAAIN,KAAJ,EAAW;QAQT,IAAIQ,IAAI,CAACC,GAALD,KAAa,MAAKD,cAAlBC,GAAmC,GAAvC,EAA4C;UAC1C,MAAKb,eAAL,GAAuBkB,UAAU,CAAC,YAAM;YACtCZ,uBAAUC,KAAVD,CAAgBa,cAAhBb,CAA+BD,KAA/BC;;YACA,MAAKK,0BAAL,GAAkCZ,SAAlC;UAF+B,GAG9B,GAH8B,CAAjC;QADF,OAKO;UACLO,uBAAUC,KAAVD,CAAgBa,cAAhBb,CAA+BD,KAA/BC;;UACA,MAAKK,0BAAL,GAAkCZ,SAAlC;QACD;MACF;IA7F+D;;IAAA;EAAA;;;;WAClEqB,gCAAuB;MACrB,KAAKhB,oBAAL;IAFgE;;;WAgGlEiB,kBAAS;MACP,OAAO,KAAKnB,KAAL,CAAWoB,QAAX,CAAoB;QACzBC,iBAAiB,EAAE,KAAKC,qBADC;QAEzBC,mBAAmB,EAAE,KAAKC,uBAFD;QAGzBC,kBAAkB,EAAE,KAAKC;MAHA,CAApB,CAAP;IAKD;;;EAtG0CC,KAAK,CAACC,S","names":["KeyboardManager","args","_defineProperty","undefined","keyboardTimeout","clearTimeout","props","enabled","clearKeyboardTimeout","input","TextInput","State","currentlyFocusedInput","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","startTimestamp","Date","now","force","Keyboard","dismiss","setTimeout","focusTextInput","componentWillUnmount","render","children","onPageChangeStart","handlePageChangeStart","onPageChangeConfirm","handlePageChangeConfirm","onPageChangeCancel","handlePageChangeCancel","React","Component"],"sources":["KeyboardManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TextInput, Keyboard, HostComponent } from 'react-native';\n\ntype Props = {\n  enabled: boolean;\n  children: (props: {\n    onPageChangeStart: () => void;\n    onPageChangeConfirm: (force: boolean) => void;\n    onPageChangeCancel: () => void;\n  }) => React.ReactNode;\n};\n\ntype InputRef = React.ElementRef<HostComponent<unknown>> | undefined;\n\nexport default class KeyboardManager extends React.Component<Props> {\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  }\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: InputRef = undefined;\n  private startTimestamp: number = 0;\n  private keyboardTimeout: any;\n\n  private clearKeyboardTimeout = () => {\n    if (this.keyboardTimeout !== undefined) {\n      clearTimeout(this.keyboardTimeout);\n      this.keyboardTimeout = undefined;\n    }\n  };\n\n  private handlePageChangeStart = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // @ts-expect-error: blurTextInput accepts both number and ref, but types say only ref\n    const input: InputRef = TextInput.State.currentlyFocusedInput\n      ? TextInput.State.currentlyFocusedInput()\n      : TextInput.State.currentlyFocusedField();\n\n    // When a page change begins, blur the currently focused input\n    TextInput.State.blurTextInput(input);\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    this.previouslyFocusedTextInput = input;\n\n    // Store timestamp for touch start\n    this.startTimestamp = Date.now();\n  };\n\n  private handlePageChangeConfirm = (force: boolean) => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    if (force) {\n      // Always dismiss input, even if we don't have a ref to it\n      // We might not have the ref if onPageChangeStart was never called\n      // This can happen if page change was not from a gesture\n      Keyboard.dismiss();\n    } else {\n      const input = this.previouslyFocusedTextInput;\n\n      if (input) {\n        // Dismiss the keyboard only if an input was a focused before\n        // This makes sure we don't dismiss input on going back and focusing an input\n        TextInput.State.blurTextInput(input);\n      }\n    }\n\n    // Cleanup the ID on successful page change\n    this.previouslyFocusedTextInput = undefined;\n  };\n\n  private handlePageChangeCancel = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = this.previouslyFocusedTextInput;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - this.startTimestamp < 100) {\n        this.keyboardTimeout = setTimeout(() => {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = undefined;\n        }, 100);\n      } else {\n        TextInput.State.focusTextInput(input);\n        this.previouslyFocusedTextInput = undefined;\n      }\n    }\n  };\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}