{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldUseActivityState = exports.MaybeScreenContainer = exports.MaybeScreen = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _excluded = [\"active\", \"style\"],\n    _excluded2 = [\"enabled\"],\n    _excluded3 = [\"enabled\", \"active\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar _Screens;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\n\nvar WebScreen = function (_React$Component) {\n  (0, _inherits2.default)(WebScreen, _React$Component);\n\n  var _super = _createSuper(WebScreen);\n\n  function WebScreen() {\n    (0, _classCallCheck2.default)(this, WebScreen);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(WebScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          style = _this$props.style,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n      return React.createElement(_reactNative.View, _extends({\n        hidden: !active,\n        style: [style, {\n          display: active ? 'flex' : 'none'\n        }]\n      }, rest));\n    }\n  }]);\n  return WebScreen;\n}(React.Component);\n\nvar AnimatedWebScreen = _reactNative.Animated.createAnimatedComponent(WebScreen);\n\nvar shouldUseActivityState = (_Screens = Screens) === null || _Screens === void 0 ? void 0 : _Screens.shouldUseActivityState;\nexports.shouldUseActivityState = shouldUseActivityState;\n\nvar MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var enabled = _ref.enabled,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded2);\n\n  var _Screens2;\n\n  if (enabled && _reactNative.Platform.OS !== 'web' && (_Screens2 = Screens) !== null && _Screens2 !== void 0 && _Screens2.screensEnabled()) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n\n  return React.createElement(_reactNative.View, rest);\n};\n\nexports.MaybeScreenContainer = MaybeScreenContainer;\n\nvar MaybeScreen = function MaybeScreen(_ref2) {\n  var enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded3);\n\n  var _Screens3;\n\n  if (enabled && _reactNative.Platform.OS === 'web') {\n    return React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest));\n  }\n\n  if (enabled && (_Screens3 = Screens) !== null && _Screens3 !== void 0 && _Screens3.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return React.createElement(Screens.Screen, _extends({\n        enabled: enabled,\n        activityState: active\n      }, rest));\n    } else {\n      return React.createElement(Screens.Screen, _extends({\n        enabled: enabled,\n        active: active\n      }, rest));\n    }\n  }\n\n  return React.createElement(_reactNative.View, rest);\n};\n\nexports.MaybeScreen = MaybeScreen;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,OAAJ;;AAEA,IAAI;EACFA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjBD;AADF,EAEE,OAAOE,CAAP,EAAU,C;;IAONC,S;;;;;;;;;;;;WAMJC,kBAAS;MACP,kBAAmC,KAAKC,KAAxC;MAAA,IAAQC,MAAR,eAAQA,MAAR;MAAA,IAAgBC,KAAhB,eAAgBA,KAAhB;MAAA,IAA0BC,IAA1B;MAEA,OACEC,oBAACC,iBAAD;QAEEC,MAAM,EAAE,CAACL,MAFX;QAGEC,KAAK,EAAE,CAACA,KAAD,EAAQ;UAAEK,OAAO,EAAEN,MAAM,GAAG,MAAH,GAAY;QAA7B,CAAR;MAHT,GAIME,IAJN,EADF;IAQD;;;EAjBqBC,KAAK,CAACI,S;;AAoB9B,IAAMC,iBAAiB,GAAGC,sBAASC,uBAATD,CAAiCZ,SAAjCY,CAA1B;;AAGO,IAAME,sBAAsB,eAAGjB,OAAH,6CAAGkB,SAASD,sBAAxC;;;AAEA,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,OAM9B;EAAA,IALJC,OAKI,QALJA,OAKI;EAAA,IAJDZ,IAIC;;EAAA;;EACJ,IAAIY,OAAO,IAAIC,sBAASC,EAATD,KAAgB,KAA3BD,iBAAoCpB,OAApC,sCAAoCuB,UAASC,cAAT,EAAxC,EAAmE;IACjE,OAEEf,oBAACT,OAAD,CAASyB,eAAT;MAAyBL,OAAO,EAAEA;IAAlC,GAA+CZ,IAA/C,EAFF;EAID;;EAED,OAAOC,oBAACC,iBAAD,EAAUF,IAAV,CAAP;AAdK;;;;AAiBA,IAAMkB,WAAW,GAAG,SAAdA,WAAc,QAQrB;EAAA,IAPJN,OAOI,SAPJA,OAOI;EAAA,IANJd,MAMI,SANJA,MAMI;EAAA,IALDE,IAKC;;EAAA;;EACJ,IAAIY,OAAO,IAAIC,sBAASC,EAATD,KAAgB,KAA/B,EAAsC;IACpC,OAAOZ,oBAACK,iBAAD;MAAmBR,MAAM,EAAEA;IAA3B,GAAuCE,IAAvC,EAAP;EACD;;EAED,IAAIY,OAAO,iBAAIpB,OAAJ,UAAPoB,IAAOO,oBAAPP,IAAWO,UAASH,cAAT,EAAf,EAA0C;IACxC,IAAIP,sBAAJ,EAA4B;MAC1B,OAEER,oBAACT,OAAD,CAAS4B,MAAT;QAAgBR,OAAO,EAAEA,OAAzB;QAAkCS,aAAa,EAAEvB;MAAjD,GAA6DE,IAA7D,EAFF;IADF,OAKO;MACL,OAEEC,oBAACT,OAAD,CAAS4B,MAAT;QAAgBR,OAAO,EAAEA,OAAzB;QAAkCd,MAAM,EAAEA;MAA1C,GAAsDE,IAAtD,EAFF;IAID;EACF;;EAED,OAAOC,oBAACC,iBAAD,EAAUF,IAAV,CAAP;AA3BK","names":["Screens","require","e","WebScreen","render","props","active","style","rest","React","View","hidden","display","Component","AnimatedWebScreen","Animated","createAnimatedComponent","shouldUseActivityState","_Screens","MaybeScreenContainer","enabled","Platform","OS","_Screens2","screensEnabled","ScreenContainer","MaybeScreen","_Screens3","Screen","activityState"],"sources":["Screens.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"script"}