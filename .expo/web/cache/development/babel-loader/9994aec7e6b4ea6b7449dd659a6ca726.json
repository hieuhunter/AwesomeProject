{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _StackView = _interopRequireDefault(require(\"../views/Stack/StackView\"));\n\nvar _excluded = [\"initialRouteName\", \"children\", \"screenOptions\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction StackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenOptions = _ref.screenOptions,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var defaultOptions = {\n    gestureEnabled: _reactNative.Platform.OS === 'ios',\n    animationEnabled: _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos'\n  };\n\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenOptions: typeof screenOptions === 'function' ? function () {\n      return _objectSpread(_objectSpread({}, defaultOptions), screenOptions.apply(void 0, arguments));\n    } : _objectSpread(_objectSpread({}, defaultOptions), screenOptions)\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    var _navigation$addListen;\n\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, _native.StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(_StackView.default, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  }));\n}\n\nvar _default = (0, _native.createNavigatorFactory)(StackNavigator);\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,SAASA,cAAT,OAKU;EAAA,IAJRC,gBAIQ,QAJRA,gBAIQ;EAAA,IAHRC,QAGQ,QAHRA,QAGQ;EAAA,IAFRC,aAEQ,QAFRA,aAEQ;EAAA,IADLC,IACK;EACR,IAAMC,cAAc,GAAG;IACrBC,cAAc,EAAEC,sBAASC,EAATD,KAAgB,KADX;IAErBE,gBAAgB,EACdF,sBAASC,EAATD,KAAgB,KAAhBA,IACAA,sBAASC,EAATD,KAAgB,SADhBA,IAEAA,sBAASC,EAATD,KAAgB;EALG,CAAvB;;EAQA,4BAA2CG,kCAMzCC,mBANyCD,EAM5B;IACbT,gBADa,EACbA,gBADa;IAEbC,QAFa,EAEbA,QAFa;IAGbC,aAAa,EACX,OAAOA,aAAP,KAAyB,UAAzB,GACI;MAAA,uCACKE,cADL,GAEKF,aAAa,MAAbA,mBAFL;IAAA,CADJ,mCAMSE,cANT,GAOSF,aAPT;EAJW,CAN4BO,CAA3C;EAAA,IAAQE,KAAR,yBAAQA,KAAR;EAAA,IAAeC,WAAf,yBAAeA,WAAf;EAAA,IAA4BC,UAA5B,yBAA4BA,UAA5B;;EAqBAC,KAAK,CAACC,SAAND,CACE;IAAA;;IAAA,gCACED,UAAU,CAACG,WADb,0DACEC,uCAAyB,UAAzB,EAAsCC,WAAD,EAAO;MAC1C,IAAMC,SAAS,GAAGN,UAAU,CAACM,SAAXN,EAAlB;MAIAO,qBAAqB,CAAC,YAAM;QAC1B,IACET,KAAK,CAACU,KAANV,GAAc,CAAdA,IACAQ,SADAR,IAEA,CAAEO,CAAD,CAAkCI,gBAHrC,EAIE;UAGAT,UAAU,CAACU,QAAXV,iCACKW,qBAAaC,QAAbD,EADLX;YAEEa,MAAM,EAAEf,KAAK,CAACgB;UAFhBd;QAID;MAZkB,EAArBO;IALQ,CAAV,CADF;EADF,GAsBE,CAACP,UAAD,EAAaF,KAAK,CAACU,KAAnB,EAA0BV,KAAK,CAACgB,GAAhC,CAtBFb;EAyBA,OACEA,oBAACc,kBAAD,eACMzB,IADN;IAEEQ,KAAK,EAAEA,KAFT;IAGEC,WAAW,EAAEA,WAHf;IAIEC,UAAU,EAAEA;EAJd,GADF;AAQD;;eAEcgB,oCAKb9B,cALa8B,C","names":["StackNavigator","initialRouteName","children","screenOptions","rest","defaultOptions","gestureEnabled","Platform","OS","animationEnabled","useNavigationBuilder","StackRouter","state","descriptors","navigation","React","useEffect","addListener","_navigation$addListen","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key","StackView","createNavigatorFactory"],"sources":["createStackNavigator.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"script"}