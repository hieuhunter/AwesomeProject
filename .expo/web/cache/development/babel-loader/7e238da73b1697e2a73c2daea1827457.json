{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _GestureHandler = require(\"../GestureHandler\");\n\nvar _CardStack = _interopRequireDefault(require(\"./CardStack\"));\n\nvar _KeyboardManager = _interopRequireDefault(require(\"../KeyboardManager\"));\n\nvar _HeaderContainer = _interopRequireDefault(require(\"../Header/HeaderContainer\"));\n\nvar _SafeAreaProviderCompat = _interopRequireDefault(require(\"../SafeAreaProviderCompat\"));\n\nvar _HeaderShownContext = _interopRequireDefault(require(\"../../utils/HeaderShownContext\"));\n\nvar _excluded = [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\", \"headerMode\", \"descriptors\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView !== null && _GestureHandler.GestureHandlerRootView !== void 0 ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\n\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\n\nvar StackView = function (_React$Component) {\n  (0, _inherits2.default)(StackView, _React$Component);\n\n  var _super = _createSuper(StackView);\n\n  function StackView() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getGesturesEnabled\", function (_ref) {\n      var route = _ref.route;\n      var descriptor = _this.state.descriptors[route.key];\n\n      if (descriptor) {\n        var _descriptor$options = descriptor.options,\n            gestureEnabled = _descriptor$options.gestureEnabled,\n            animationEnabled = _descriptor$options.animationEnabled;\n\n        if (animationEnabled === false) {\n          return false;\n        }\n\n        return gestureEnabled !== false;\n      }\n\n      return false;\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getPreviousRoute\", function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n          closingRouteKeys = _this$state.closingRouteKeys,\n          replacingRouteKeys = _this$state.replacingRouteKeys;\n\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderScene\", function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n\n      if (!descriptor) {\n        return null;\n      }\n\n      return descriptor.render();\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderHeader\", function (props) {\n      return React.createElement(_HeaderContainer.default, props);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleOpenRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props = _this.props,\n          state = _this$props.state,\n          navigation = _this$props.navigation;\n      var _this$state2 = _this.state,\n          closingRouteKeys = _this$state2.closingRouteKeys,\n          replacingRouteKeys = _this$state2.replacingRouteKeys;\n\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.navigate(route);\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleCloseRoute\", function (_ref5) {\n      var route = _ref5.route;\n      var _this$props2 = _this.props,\n          state = _this$props2.state,\n          navigation = _this$props2.navigation;\n\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, _native.StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleTransitionStart\", function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleTransitionEnd\", function (_ref7, closing) {\n      var route = _ref7.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureStart\", function (_ref8) {\n      var route = _ref8.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureEnd\", function (_ref9) {\n      var route = _ref9.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureCancel\", function (_ref10) {\n      var route = _ref10.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          state = _this$props3.state,\n          navigation = _this$props3.navigation,\n          keyboardHandlingEnabled = _this$props3.keyboardHandlingEnabled,\n          _this$props3$mode = _this$props3.mode,\n          mode = _this$props3$mode === void 0 ? 'card' : _this$props3$mode,\n          _this$props3$headerMo = _this$props3.headerMode,\n          headerMode = _this$props3$headerMo === void 0 ? mode === 'card' && _reactNative.Platform.OS === 'ios' ? 'float' : 'screen' : _this$props3$headerMo,\n          _ = _this$props3.descriptors,\n          rest = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);\n      var _this$state3 = this.state,\n          routes = _this$state3.routes,\n          descriptors = _this$state3.descriptors,\n          openingRouteKeys = _this$state3.openingRouteKeys,\n          closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(_native.NavigationHelpersContext.Provider, {\n        value: navigation\n      }, React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(_SafeAreaProviderCompat.default, null, React.createElement(_reactNativeSafeAreaContext.SafeAreaConsumer, null, function (insets) {\n        return React.createElement(_KeyboardManager.default, {\n          enabled: keyboardHandlingEnabled !== false\n        }, function (props) {\n          return React.createElement(_HeaderShownContext.default.Consumer, null, function (isParentHeaderShown) {\n            return React.createElement(_CardStack.default, _extends({\n              mode: mode,\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              getPreviousRoute: _this2.getPreviousRoute,\n              getGesturesEnabled: _this2.getGesturesEnabled,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              headerMode: headerMode,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest, props));\n          });\n        });\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n          closingRouteKeys = state.closingRouteKeys,\n          replacingRouteKeys = state.replacingRouteKeys,\n          previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat((0, _toConsumableArray2.default)(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat((0, _toConsumableArray2.default)(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n\n        routes = routes.slice();\n\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat((0, _toConsumableArray2.default)(state.routes.filter(function (_ref11) {\n          var key = _ref11.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n  return StackView;\n}(React.Component);\n\nexports.default = StackView;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AAGA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAMA,qBAAqB,GAAGC,2CAAH,IAAGA,+CAAH,MAAGA,4CAA0BC,iBAAxD;;AAMA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAWC,CAAX;EAAA,OACnBD,CAAC,CAACE,MAAFF,KAAaC,CAAC,CAACC,MAAfF,IAAyBA,CAAC,CAACG,KAAFH,CAAQ,UAACI,EAAD,EAAKC,KAAL;IAAA,OAAeD,EAAE,KAAKH,CAAC,CAACI,KAAD,CAAvB;EAAA,CAARL,CADN;AAAA,CAArB;;IAGqBM,S;;;;;EAAgD;IAAA;;IAAA;;IAAA;MAAAC;IAAA;;IAAA;;IAAAC,sEAyNpD;MACbC,MAAM,EAAE,EADK;MAEbC,cAAc,EAAE,EAFH;MAGbC,mBAAmB,EAAE,EAHR;MAIbC,gBAAgB,EAAE,EAJL;MAKbC,gBAAgB,EAAE,EALL;MAMbC,kBAAkB,EAAE,EANP;MAObC,WAAW,EAAE;IAPA,CAzNoD;;IAAAP,mFAmOtC,gBAAyC;MAAA,IAAtCQ,KAAsC,QAAtCA,KAAsC;MACpE,IAAMC,UAAU,GAAG,MAAKC,KAAL,CAAWH,WAAX,CAAuBC,KAAK,CAACG,GAA7B,CAAnB;;MAEA,IAAIF,UAAJ,EAAgB;QACd,0BAA6CA,UAAU,CAACG,OAAxD;QAAA,IAAQC,cAAR,uBAAQA,cAAR;QAAA,IAAwBC,gBAAxB,uBAAwBA,gBAAxB;;QAEA,IAAIA,gBAAgB,KAAK,KAAzB,EAAgC;UAG9B,OAAO,KAAP;QACD;;QAED,OAAOD,cAAc,KAAK,KAA1B;MACD;;MAED,OAAO,KAAP;IAlPiE;;IAAAb,iFAqPxC,iBAAyC;MAAA,IAAtCQ,KAAsC,SAAtCA,KAAsC;MAClE,kBAAiD,MAAKE,KAAtD;MAAA,IAAQL,gBAAR,eAAQA,gBAAR;MAAA,IAA0BC,kBAA1B,eAA0BA,kBAA1B;;MACA,IAAML,MAAM,GAAG,MAAKS,KAAL,CAAWT,MAAX,CAAkBc,MAAlB,CACZC,WAAD;QAAA,OACEA,CAAC,CAACL,GAAFK,KAAUR,KAAK,CAACG,GAAhBK,IACC,CAACX,gBAAgB,CAACY,QAAjBZ,CAA0BW,CAAC,CAACL,GAA5BN,CAAD,IACC,CAACC,kBAAkB,CAACW,QAAnBX,CAA4BU,CAAC,CAACL,GAA9BL,CAHL;MAAA,CADa,CAAf;;MAOA,IAAMT,KAAK,GAAGI,MAAM,CAACiB,SAAPjB,CAAkBe,WAAD;QAAA,OAAOA,CAAC,CAACL,GAAFK,KAAUR,KAAK,CAACG,GAAvB;MAAA,CAAjBV,CAAd;MAEA,OAAOA,MAAM,CAACJ,KAAK,GAAG,CAAT,CAAb;IAhQiE;;IAAAG,4EAmQ7C,iBAAyC;MAAA,IAAtCQ,KAAsC,SAAtCA,KAAsC;MAC7D,IAAMC,UAAU,GACd,MAAKC,KAAL,CAAWH,WAAX,CAAuBC,KAAK,CAACG,GAA7B,KAAqC,MAAKQ,KAAL,CAAWZ,WAAX,CAAuBC,KAAK,CAACG,GAA7B,CADvC;;MAGA,IAAI,CAACF,UAAL,EAAiB;QACf,OAAO,IAAP;MACD;;MAED,OAAOA,UAAU,CAACW,MAAXX,EAAP;IA3QiE;;IAAAT,6EA8Q3CmB,eAAD,EAAiC;MACtD,OAAOE,oBAACC,wBAAD,EAAqBH,KAArB,CAAP;IA/QiE;;IAAAnB,gFAkRzC,iBAAyC;MAAA,IAAtCQ,KAAsC,SAAtCA,KAAsC;MACjE,kBAA8B,MAAKW,KAAnC;MAAA,IAAQT,KAAR,eAAQA,KAAR;MAAA,IAAea,UAAf,eAAeA,UAAf;MACA,mBAAiD,MAAKb,KAAtD;MAAA,IAAQL,gBAAR,gBAAQA,gBAAR;MAAA,IAA0BC,kBAA1B,gBAA0BA,kBAA1B;;MAEA,IACED,gBAAgB,CAACmB,IAAjBnB,CAAuBM,aAAD;QAAA,OAASA,GAAG,KAAKH,KAAK,CAACG,GAAvB;MAAA,CAAtBN,KACAC,kBAAkB,CAACX,KAAnBW,CAA0BK,aAAD;QAAA,OAASA,GAAG,KAAKH,KAAK,CAACG,GAAvB;MAAA,CAAzBL,CADAD,IAEAK,KAAK,CAACe,UAANf,CAAiBO,QAAjBP,CAA0BF,KAAK,CAACkB,IAAhChB,CAFAL,IAGA,CAACK,KAAK,CAACT,MAANS,CAAac,IAAbd,CAAmBM,WAAD;QAAA,OAAOA,CAAC,CAACL,GAAFK,KAAUR,KAAK,CAACG,GAAvB;MAAA,CAAlBD,CAJH,EAKE;QAGAa,UAAU,CAACI,QAAXJ,CAAoBf,KAApBe;MARF,OASO;QACL,MAAKK,QAAL,CAAelB,eAAD;UAAA,OAAY;YACxBT,MAAM,EAAES,KAAK,CAACJ,kBAANI,CAAyBhB,MAAzBgB,GACJA,KAAK,CAACT,MAANS,CAAaK,MAAbL,CACGM,WAAD;cAAA,OAAO,CAACN,KAAK,CAACJ,kBAANI,CAAyBO,QAAzBP,CAAkCM,CAAC,CAACL,GAApCD,CAAR;YAAA,CADFA,CADIA,GAIJA,KAAK,CAACT,MALc;YAMxBG,gBAAgB,EAAEM,KAAK,CAACN,gBAANM,CAAuBK,MAAvBL,CACfC,aAAD;cAAA,OAASA,GAAG,KAAKH,KAAK,CAACG,GAAvB;YAAA,CADgBD,CANM;YASxBL,gBAAgB,EAAEK,KAAK,CAACL,gBAANK,CAAuBK,MAAvBL,CACfC,aAAD;cAAA,OAASA,GAAG,KAAKH,KAAK,CAACG,GAAvB;YAAA,CADgBD,CATM;YAYxBJ,kBAAkB,EAAE;UAZI,CAAZ;QAAA,CAAd;MAcD;IA9SgE;;IAAAN,iFAiTxC,iBAAyC;MAAA,IAAtCQ,KAAsC,SAAtCA,KAAsC;MAClE,mBAA8B,MAAKW,KAAnC;MAAA,IAAQT,KAAR,gBAAQA,KAAR;MAAA,IAAea,UAAf,gBAAeA,UAAf;;MAEA,IAAIb,KAAK,CAACT,MAANS,CAAac,IAAbd,CAAmBM,WAAD;QAAA,OAAOA,CAAC,CAACL,GAAFK,KAAUR,KAAK,CAACG,GAAvB;MAAA,CAAlBD,CAAJ,EAAmD;QAIjDa,UAAU,CAACM,QAAXN,iCACKO,qBAAaC,GAAbD,EADLP;UAEES,MAAM,EAAExB,KAAK,CAACG,GAFhBY;UAGEU,MAAM,EAAEvB,KAAK,CAACC;QAHhBY;MAJF,OASO;QAEL,MAAKK,QAAL,CAAelB,eAAD;UAAA,OAAY;YACxBT,MAAM,EAAES,KAAK,CAACT,MAANS,CAAaK,MAAbL,CAAqBM,WAAD;cAAA,OAAOA,CAAC,CAACL,GAAFK,KAAUR,KAAK,CAACG,GAAvB;YAAA,CAApBD,CADgB;YAExBN,gBAAgB,EAAEM,KAAK,CAACN,gBAANM,CAAuBK,MAAvBL,CACfC,aAAD;cAAA,OAASA,GAAG,KAAKH,KAAK,CAACG,GAAvB;YAAA,CADgBD,CAFM;YAKxBL,gBAAgB,EAAEK,KAAK,CAACL,gBAANK,CAAuBK,MAAvBL,CACfC,aAAD;cAAA,OAASA,GAAG,KAAKH,KAAK,CAACG,GAAvB;YAAA,CADgBD;UALM,CAAZ;QAAA,CAAd;MASD;IAxUgE;;IAAAV,sFA2UnC,iBAE9BkC,OAF8B;MAAA,IAC5B1B,KAD4B,SAC5BA,KAD4B;MAAA,OAI9B,MAAKW,KAAL,CAAWI,UAAX,CAAsBY,IAAtB,CAA2B;QACzBC,IAAI,EAAE,iBADmB;QAEzBC,IAAI,EAAE;UAAEH;QAAF,CAFmB;QAGzBD,MAAM,EAAEzB,KAAK,CAACG;MAHW,CAA3B,CAJ8B;IAAA,CA3UmC;;IAAAX,oFAqVrC,iBAE5BkC,OAF4B;MAAA,IAC1B1B,KAD0B,SAC1BA,KAD0B;MAAA,OAI5B,MAAKW,KAAL,CAAWI,UAAX,CAAsBY,IAAtB,CAA2B;QACzBC,IAAI,EAAE,eADmB;QAEzBC,IAAI,EAAE;UAAEH;QAAF,CAFmB;QAGzBD,MAAM,EAAEzB,KAAK,CAACG;MAHW,CAA3B,CAJ4B;IAAA,CArVqC;;IAAAX,mFA+VtC,iBAAyC;MAAA,IAAtCQ,KAAsC,SAAtCA,KAAsC;;MACpE,MAAKW,KAAL,CAAWI,UAAX,CAAsBY,IAAtB,CAA2B;QACzBC,IAAI,EAAE,cADmB;QAEzBH,MAAM,EAAEzB,KAAK,CAACG;MAFW,CAA3B;IAhWiE;;IAAAX,iFAsWxC,iBAAyC;MAAA,IAAtCQ,KAAsC,SAAtCA,KAAsC;;MAClE,MAAKW,KAAL,CAAWI,UAAX,CAAsBY,IAAtB,CAA2B;QACzBC,IAAI,EAAE,YADmB;QAEzBH,MAAM,EAAEzB,KAAK,CAACG;MAFW,CAA3B;IAvWiE;;IAAAX,oFA6WrC,kBAAyC;MAAA,IAAtCQ,KAAsC,UAAtCA,KAAsC;;MACrE,MAAKW,KAAL,CAAWI,UAAX,CAAsBY,IAAtB,CAA2B;QACzBC,IAAI,EAAE,eADmB;QAEzBH,MAAM,EAAEzB,KAAK,CAACG;MAFW,CAA3B;IA9WiE;;IAAA;EAAA;;;;WAoXnES,kBAAS;MAAA;;MACP,mBAWI,KAAKD,KAXT;MAAA,IACET,KADF,gBACEA,KADF;MAAA,IAEEa,UAFF,gBAEEA,UAFF;MAAA,IAGEe,uBAHF,gBAGEA,uBAHF;MAAA,qCAIEC,IAJF;MAAA,IAIEA,IAJF,kCAIS,MAJT;MAAA,yCAKEC,UALF;MAAA,IAKEA,UALF,sCAKeD,IAAI,KAAK,MAATA,IAAmBE,sBAASC,EAATD,KAAgB,KAAnCF,GACT,OADSA,GAET,QAPN;MAAA,IASeI,CATf,gBASEpC,WATF;MAAA,IAUKqC,IAVL;MAaA,mBAKI,KAAKlC,KALT;MAAA,IACET,MADF,gBACEA,MADF;MAAA,IAEEM,WAFF,gBAEEA,WAFF;MAAA,IAGEH,gBAHF,gBAGEA,gBAHF;MAAA,IAIEC,gBAJF,gBAIEA,gBAJF;MAOA,OACEgB,oBAACwB,iCAAyBC,QAA1B;QAAmCC,KAAK,EAAExB;MAA1C,GACEF,oBAACjC,qBAAD;QAAuB4D,KAAK,EAAEC,MAAM,CAACC;MAArC,GACE7B,oBAAC8B,+BAAD,QACE9B,oBAAC+B,4CAAD,QACIC,gBAAD;QAAA,OACChC,oBAACiC,wBAAD;UAAiBC,OAAO,EAAEjB,uBAAuB,KAAK;QAAtD,GACInB,eAAD;UAAA,OACCE,oBAACmC,4BAAmBC,QAApB,QACIC,6BAAD;YAAA,OACCrC,oBAACsC,kBAAD;cACEpB,IAAI,EAAEA,IADR;cAEEc,MAAM,EAAEA,MAFV;cAGEK,mBAAmB,EAAEA,mBAHvB;cAIEE,gBAAgB,EAAE,OAAKA,gBAJzB;cAKEC,kBAAkB,EAAE,OAAKA,kBAL3B;cAME5D,MAAM,EAAEA,MANV;cAOEG,gBAAgB,EAAEA,gBAPpB;cAQEC,gBAAgB,EAAEA,gBARpB;cASEyD,WAAW,EAAE,OAAKC,eATpB;cAUEC,YAAY,EAAE,OAAKC,gBAVrB;cAWEC,iBAAiB,EAAE,OAAKC,qBAX1B;cAYEC,eAAe,EAAE,OAAKC,mBAZxB;cAaEC,YAAY,EAAE,OAAKA,YAbrB;cAcEC,WAAW,EAAE,OAAKA,WAdpB;cAeE/B,UAAU,EAAEA,UAfd;cAgBE9B,KAAK,EAAEA,KAhBT;cAiBEH,WAAW,EAAEA,WAjBf;cAkBEiE,cAAc,EAAE,OAAKC,kBAlBvB;cAmBEC,YAAY,EAAE,OAAKC,gBAnBrB;cAoBEC,eAAe,EAAE,OAAKC;YApBxB,GAqBMjC,IArBN,EAsBMzB,KAtBN,EADD;UAAA,CADH,CADD;QAAA,CADH,CADD;MAAA,CADH,CADF,CADF,CADF,CADF;IA4CD;;;WApbD,kCACEA,KADF,EAEET,KAFF,EAGE;MAEA,IACE,CAACS,KAAK,CAACT,KAANS,CAAYlB,MAAZkB,KAAuBT,KAAK,CAACR,cAA7BiB,IACC5B,YAAY,CACV4B,KAAK,CAACT,KAANS,CAAYlB,MAAZkB,CAAmB2D,GAAnB3D,CAAwBH,WAAD;QAAA,OAAOA,CAAC,CAACL,GAAT;MAAA,CAAvBQ,CADU,EAEVT,KAAK,CAACR,cAANQ,CAAqBoE,GAArBpE,CAA0BM,WAAD;QAAA,OAAOA,CAAC,CAACL,GAAT;MAAA,CAAzBD,CAFU,CADd,KAKAA,KAAK,CAACT,MAANS,CAAahB,MANf,EAOE;QACA,IAAIO,OAAM,GAAGS,KAAK,CAACT,MAAnB;QACA,IAAIC,eAAc,GAAGQ,KAAK,CAACR,cAA3B;QACA,IAAIK,YAAW,GAAGY,KAAK,CAACZ,WAAxB;QACA,IAAIJ,mBAAmB,GAAGO,KAAK,CAACP,mBAAhC;;QAEA,IAAIgB,KAAK,CAACZ,WAANY,KAAsBT,KAAK,CAACP,mBAAhC,EAAqD;UACnDI,YAAW,GAAGG,KAAK,CAACT,MAANS,CAAaqE,MAAbrE,CAAwC,UAACsE,GAAD,EAAMxE,KAAN,EAAgB;YACpEwE,GAAG,CAACxE,KAAK,CAACG,GAAP,CAAHqE,GACE7D,KAAK,CAACZ,WAANY,CAAkBX,KAAK,CAACG,GAAxBQ,KAAgCT,KAAK,CAACH,WAANG,CAAkBF,KAAK,CAACG,GAAxBD,CADlCsE;YAGA,OAAOA,GAAP;UAJY,GAKX,EALWtE,CAAdH;UAOAJ,mBAAmB,GAAGgB,KAAK,CAACZ,WAA5BJ;QACD;;QAED,IAAIgB,KAAK,CAACT,KAANS,CAAYlB,MAAZkB,KAAuBT,KAAK,CAACR,cAAjC,EAAiD;UAE/C,IAAM4E,GAAG,GAAG3D,KAAK,CAACT,KAANS,CAAYlB,MAAZkB,CAAmB4D,MAAnB5D,CACV,UAAC6D,GAAD,EAAMxE,KAAN,EAAgB;YACdwE,GAAG,CAACxE,KAAK,CAACG,GAAP,CAAHqE,GAAiBxE,KAAjBwE;YACA,OAAOA,GAAP;UAHQ,GAKV,EALU7D,CAAZ;UAQAlB,OAAM,GAAGS,KAAK,CAACT,MAANS,CAAaoE,GAAbpE,CAAkBF,eAAD;YAAA,OAAWsE,GAAG,CAACtE,KAAK,CAACG,GAAP,CAAHmE,IAAkBtE,KAA7B;UAAA,CAAjBE,CAATT;UACAC,eAAc,GAAGiB,KAAK,CAACT,KAANS,CAAYlB,MAA7BC;QACD;;QAED,OAAO;UACLD,MADK,EACLA,OADK;UAELC,cAFK,EAELA,eAFK;UAGLK,WAHK,EAGLA,YAHK;UAILJ;QAJK,CAAP;MAxCF;;MAmDA,IAAIF,MAAM,GACRkB,KAAK,CAACT,KAANS,CAAYtB,KAAZsB,GAAoBA,KAAK,CAACT,KAANS,CAAYlB,MAAZkB,CAAmBzB,MAAnByB,GAA4B,CAAhDA,GAGIA,KAAK,CAACT,KAANS,CAAYlB,MAAZkB,CAAmB8D,KAAnB9D,CAAyB,CAAzBA,EAA4BA,KAAK,CAACT,KAANS,CAAYtB,KAAZsB,GAAoB,CAAhDA,CAHJA,GAIIA,KAAK,CAACT,KAANS,CAAYlB,MALlB;MAQA,IACEG,gBADF,GAKIM,KALJ,CACEN,gBADF;MAAA,IAEEC,gBAFF,GAKIK,KALJ,CAEEL,gBAFF;MAAA,IAGEC,kBAHF,GAKII,KALJ,CAGEJ,kBAHF;MAAA,IAIEJ,cAJF,GAKIQ,KALJ,CAIER,cAJF;MAOA,IAAMgF,oBAAoB,GAAGhF,cAAc,CAACA,cAAc,CAACR,MAAfQ,GAAwB,CAAzB,CAA3C;MAGA,IAAMiF,gBAAgB,GAAGlF,MAAM,CAACA,MAAM,CAACP,MAAPO,GAAgB,CAAjB,CAA/B;;MAEA,IAAMmF,kBAAkB,GAAIzE,SAAtByE,kBAAsBzE,IAAD,EAAiB;QAC1C,IAAMF,UAAU,GAAGU,KAAK,CAACZ,WAANY,CAAkBR,GAAlBQ,KAA0BT,KAAK,CAACH,WAANG,CAAkBC,GAAlBD,CAA7C;QAEA,OAAOD,UAAU,GAAGA,UAAU,CAACG,OAAXH,CAAmBK,gBAAnBL,KAAwC,KAA3C,GAAmD,IAApE;MAHF;;MAMA,IAAM4E,0BAA0B,GAAI1E,SAA9B0E,0BAA8B1E,IAAD,EAAiB;QAAA;;QAClD,IAAMF,UAAU,GAAGU,KAAK,CAACZ,WAANY,CAAkBR,GAAlBQ,KAA0BT,KAAK,CAACH,WAANG,CAAkBC,GAAlBD,CAA7C;QAEA,gCAAOD,UAAU,CAACG,OAAXH,CAAmB6E,uBAA1B,yEAAqD,MAArD;MAHF;;MAMA,IACEJ,oBAAoB,IACpBA,oBAAoB,CAACvE,GAArBuE,KAA6BC,gBAAgB,CAACxE,GAFhD,EAGE;QAIA,IAAI,CAACT,cAAc,CAACsB,IAAftB,CAAqBc,WAAD;UAAA,OAAOA,CAAC,CAACL,GAAFK,KAAUmE,gBAAgB,CAACxE,GAAlC;QAAA,CAApBT,CAAL,EAAiE;UAI/D,IACEkF,kBAAkB,CAACD,gBAAgB,CAACxE,GAAlB,CAAlByE,IACA,CAAChF,gBAAgB,CAACa,QAAjBb,CAA0B+E,gBAAgB,CAACxE,GAA3CP,CAFH,EAGE;YAGAA,gBAAgB,8CAAOA,gBAAP,IAAyB+E,gBAAgB,CAACxE,GAA1C,EAAhBP;YAEAC,gBAAgB,GAAGA,gBAAgB,CAACU,MAAjBV,CAChBM,aAAD;cAAA,OAASA,GAAG,KAAKwE,gBAAgB,CAACxE,GAAlC;YAAA,CADiBN,CAAnBA;YAGAC,kBAAkB,GAAGA,kBAAkB,CAACS,MAAnBT,CAClBK,aAAD;cAAA,OAASA,GAAG,KAAKwE,gBAAgB,CAACxE,GAAlC;YAAA,CADmBL,CAArBA;;YAIA,IAAI,CAACL,MAAM,CAACuB,IAAPvB,CAAae,WAAD;cAAA,OAAOA,CAAC,CAACL,GAAFK,KAAUkE,oBAAoB,CAACvE,GAAtC;YAAA,CAAZV,CAAL,EAA6D;cAG3DG,gBAAgB,GAAGA,gBAAgB,CAACW,MAAjBX,CAChBO,aAAD;gBAAA,OAASA,GAAG,KAAKuE,oBAAoB,CAACvE,GAAtC;cAAA,CADiBP,CAAnBA;;cAIA,IAAIiF,0BAA0B,CAACF,gBAAgB,CAACxE,GAAlB,CAA1B0E,KAAqD,KAAzD,EAAgE;gBAC9DhF,gBAAgB,8CACXA,gBADW,IAEd6E,oBAAoB,CAACvE,GAFP,EAAhBN;gBAQAD,gBAAgB,GAAGA,gBAAgB,CAACW,MAAjBX,CAChBO,aAAD;kBAAA,OAASA,GAAG,KAAKwE,gBAAgB,CAACxE,GAAlC;gBAAA,CADiBP,CAAnBA;gBAKAH,MAAM,8CAAOA,MAAP,IAAeiF,oBAAf,EAANjF;cAdF,OAeO;gBACLK,kBAAkB,8CACbA,kBADa,IAEhB4E,oBAAoB,CAACvE,GAFL,EAAlBL;gBAKAD,gBAAgB,GAAGA,gBAAgB,CAACU,MAAjBV,CAChBM,aAAD;kBAAA,OAASA,GAAG,KAAKuE,oBAAoB,CAACvE,GAAtC;gBAAA,CADiBN,CAAnBA;gBAOAJ,MAAM,GAAGA,MAAM,CAACgF,KAAPhF,EAATA;gBACAA,MAAM,CAACsF,MAAPtF,CAAcA,MAAM,CAACP,MAAPO,GAAgB,CAA9BA,EAAiC,CAAjCA,EAAoCiF,oBAApCjF;cACD;YACF;UACF;QA1DH,OA2DO,IAAI,CAACA,MAAM,CAACuB,IAAPvB,CAAae,WAAD;UAAA,OAAOA,CAAC,CAACL,GAAFK,KAAUkE,oBAAoB,CAACvE,GAAtC;QAAA,CAAZV,CAAL,EAA6D;UAGlE,IACEmF,kBAAkB,CAACF,oBAAoB,CAACvE,GAAtB,CAAlByE,IACA,CAAC/E,gBAAgB,CAACY,QAAjBZ,CAA0B6E,oBAAoB,CAACvE,GAA/CN,CAFH,EAGE;YACAA,gBAAgB,8CAAOA,gBAAP,IAAyB6E,oBAAoB,CAACvE,GAA9C,EAAhBN;YAIAD,gBAAgB,GAAGA,gBAAgB,CAACW,MAAjBX,CAChBO,aAAD;cAAA,OAASA,GAAG,KAAKuE,oBAAoB,CAACvE,GAAtC;YAAA,CADiBP,CAAnBA;YAGAE,kBAAkB,GAAGA,kBAAkB,CAACS,MAAnBT,CAClBK,aAAD;cAAA,OAASA,GAAG,KAAKuE,oBAAoB,CAACvE,GAAtC;YAAA,CADmBL,CAArBA;YAKAL,MAAM,8CAAOA,MAAP,IAAeiF,oBAAf,EAANjF;UACD;QApBI,OAqBA,CAIN;MA3FH,OA4FO,IAAIK,kBAAkB,CAACZ,MAAnBY,IAA6BD,gBAAgB,CAACX,MAAlD,EAA0D;QAAA;;QAE/DO,MAAM,GAAGA,MAAM,CAACgF,KAAPhF,EAATA;;QACAA,kBAAM,EAACsF,MAAPtF,kBACEA,MAAM,CAACP,MAAPO,GAAgB,CADlBA,EAEE,CAFFA,0CAGKS,KAAK,CAACT,MAANS,CAAaK,MAAbL,CAAoB;UAAA,IAAGC,GAAH,UAAGA,GAAH;UAAA,OACrByE,kBAAkB,CAACzE,GAAD,CAAlByE,GACI9E,kBAAkB,CAACW,QAAnBX,CAA4BK,GAA5BL,KAAoCD,gBAAgB,CAACY,QAAjBZ,CAA0BM,GAA1BN,CADxC+E,GAEI,KAHiB;QAAA,CAApB1E,CAHLT;MASD;;MAED,IAAI,CAACA,MAAM,CAACP,MAAZ,EAAoB;QAClB,MAAM,IAAI8F,KAAJ,CACJ,oEADI,CAAN;MAGD;;MAED,IAAMjF,WAAW,GAAGN,MAAM,CAAC8E,MAAP9E,CAAkC,UAAC+E,GAAD,EAAMxE,KAAN,EAAgB;QACpEwE,GAAG,CAACxE,KAAK,CAACG,GAAP,CAAHqE,GACE7D,KAAK,CAACZ,WAANY,CAAkBX,KAAK,CAACG,GAAxBQ,KAAgCT,KAAK,CAACH,WAANG,CAAkBF,KAAK,CAACG,GAAxBD,CADlCsE;QAGA,OAAOA,GAAP;MAJkB,GAKjB,EALiB/E,CAApB;MAOA,OAAO;QACLA,MADK,EACLA,MADK;QAELC,cAAc,EAAEiB,KAAK,CAACT,KAANS,CAAYlB,MAFvB;QAGLE,mBAAmB,EAAEgB,KAAK,CAACZ,WAHtB;QAILH,gBAJK,EAILA,gBAJK;QAKLC,gBALK,EAKLA,gBALK;QAMLC,kBANK,EAMLA,kBANK;QAOLC;MAPK,CAAP;IASD;;;EAvNoCc,KAAK,CAACoE,S;;;;AAwb7C,IAAMxC,MAAM,GAAGyC,wBAAWC,MAAXD,CAAkB;EAC/BxC,SAAS,EAAE;IACT0C,IAAI,EAAE;EADG;AADoB,CAAlBF,CAAf","names":["GestureHandlerWrapper","GestureHandlerRootView","View","isArrayEqual","a","b","length","every","it","index","StackView","args","_defineProperty","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","options","gestureEnabled","animationEnabled","filter","r","includes","findIndex","props","render","React","HeaderContainer","navigation","some","routeNames","name","navigate","setState","dispatch","StackActions","pop","source","target","closing","emit","type","data","keyboardHandlingEnabled","mode","headerMode","Platform","OS","_","rest","NavigationHelpersContext","Provider","value","style","styles","container","SafeAreaProviderCompat","SafeAreaConsumer","insets","KeyboardManager","enabled","HeaderShownContext","Consumer","isParentHeaderShown","CardStack","getPreviousRoute","getGesturesEnabled","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","onTransitionStart","handleTransitionStart","onTransitionEnd","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","Component","StyleSheet","create","flex"],"sources":["StackView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  NavigationHelpersContext,\n  StackActions,\n  StackNavigationState,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== false;\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <HeaderShownContext.Consumer>\n                      {(isParentHeaderShown) => (\n                        <CardStack\n                          mode={mode}\n                          insets={insets as EdgeInsets}\n                          isParentHeaderShown={isParentHeaderShown}\n                          getPreviousRoute={this.getPreviousRoute}\n                          getGesturesEnabled={this.getGesturesEnabled}\n                          routes={routes}\n                          openingRouteKeys={openingRouteKeys}\n                          closingRouteKeys={closingRouteKeys}\n                          onOpenRoute={this.handleOpenRoute}\n                          onCloseRoute={this.handleCloseRoute}\n                          onTransitionStart={this.handleTransitionStart}\n                          onTransitionEnd={this.handleTransitionEnd}\n                          renderHeader={this.renderHeader}\n                          renderScene={this.renderScene}\n                          headerMode={headerMode}\n                          state={state}\n                          descriptors={descriptors}\n                          onGestureStart={this.handleGestureStart}\n                          onGestureEnd={this.handleGestureEnd}\n                          onGestureCancel={this.handleGestureCancel}\n                          {...rest}\n                          {...props}\n                        />\n                      )}\n                    </HeaderShownContext.Consumer>\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}