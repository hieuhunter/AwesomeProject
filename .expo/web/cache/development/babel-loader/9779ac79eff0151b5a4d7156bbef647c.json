{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar IS_ANDROID = Platform.OS === 'android';\nexport function getInputRangeFromIndexes(range, index, carouselProps) {\n  var sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;\n  var inputRange = [];\n\n  for (var i = 0; i < range.length; i++) {\n    inputRange.push((index - range[i]) * sizeRef);\n  }\n\n  return inputRange;\n}\nexport function defaultScrollInterpolator(index, carouselProps) {\n  var range = [1, 0, -1];\n  var inputRange = getInputRangeFromIndexes(range, index, carouselProps);\n  var outputRange = [0, 1, 0];\n  return {\n    inputRange: inputRange,\n    outputRange: outputRange\n  };\n}\nexport function defaultAnimatedStyles(_index, animatedValue, carouselProps) {\n  var animatedOpacity = {};\n  var animatedScale = {};\n\n  if (carouselProps.inactiveSlideOpacity < 1) {\n    animatedOpacity = {\n      opacity: animatedValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [carouselProps.inactiveSlideOpacity, 1]\n      })\n    };\n  }\n\n  if (carouselProps.inactiveSlideScale < 1) {\n    animatedScale = {\n      transform: [{\n        scale: animatedValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [carouselProps.inactiveSlideScale, 1]\n        })\n      }]\n    };\n  }\n\n  return _objectSpread(_objectSpread({}, animatedOpacity), animatedScale);\n}\nexport function shiftAnimatedStyles(_index, animatedValue, carouselProps) {\n  var animatedOpacity = {};\n  var animatedScale = {};\n  var animatedTranslate = {};\n\n  if (carouselProps.inactiveSlideOpacity < 1) {\n    animatedOpacity = {\n      opacity: animatedValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [carouselProps.inactiveSlideOpacity, 1]\n      })\n    };\n  }\n\n  if (carouselProps.inactiveSlideScale < 1) {\n    animatedScale = {\n      scale: animatedValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [carouselProps.inactiveSlideScale, 1]\n      })\n    };\n  }\n\n  if (carouselProps.inactiveSlideShift !== 0) {\n    var translateProp = carouselProps.vertical ? 'translateX' : 'translateY';\n    animatedTranslate = _defineProperty({}, translateProp, animatedValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [carouselProps.inactiveSlideShift, 0]\n    }));\n  }\n\n  return _objectSpread(_objectSpread({}, animatedOpacity), {}, {\n    transform: [_objectSpread({}, animatedScale), _objectSpread({}, animatedTranslate)]\n  });\n}\nexport function stackScrollInterpolator(index, carouselProps) {\n  var range = IS_ANDROID ? [1, 0, -1, -2, -3] : [3, 2, 1, 0, -1];\n  var inputRange = getInputRangeFromIndexes(range, index, carouselProps);\n  var outputRange = range;\n  return {\n    inputRange: inputRange,\n    outputRange: outputRange\n  };\n}\nexport function stackAnimatedStyles(index, animatedValue, carouselProps, cardOffset) {\n  var sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;\n  var translateProp = carouselProps.vertical ? 'translateY' : 'translateX';\n  var card1Scale = 0.9;\n  var card2Scale = 0.8;\n  var newCardOffset = cardOffset !== null && cardOffset !== void 0 ? cardOffset : 18;\n\n  var getTranslateFromScale = function getTranslateFromScale(cardIndex, scale) {\n    var centerFactor = 1 / scale * cardIndex;\n    var centeredPosition = -Math.round(sizeRef * centerFactor);\n    var edgeAlignment = Math.round((sizeRef - sizeRef * scale) / 2);\n    var offset = Math.round(newCardOffset * Math.abs(cardIndex) / scale);\n    return IS_ANDROID ? centeredPosition - edgeAlignment - offset : centeredPosition + edgeAlignment + offset;\n  };\n\n  var opacityOutputRange = carouselProps.inactiveSlideOpacity === 1 ? [1, 1, 1, 0] : [1, 0.75, 0.5, 0];\n  return IS_ANDROID ? {\n    opacity: animatedValue.interpolate({\n      inputRange: [-3, -2, -1, 0],\n      outputRange: opacityOutputRange.reverse(),\n      extrapolate: 'clamp'\n    }),\n    transform: [{\n      scale: animatedValue.interpolate({\n        inputRange: [-2, -1, 0, 1],\n        outputRange: [card2Scale, card1Scale, 1, card1Scale],\n        extrapolate: 'clamp'\n      })\n    }, _defineProperty({}, translateProp, animatedValue.interpolate({\n      inputRange: [-3, -2, -1, 0, 1],\n      outputRange: [getTranslateFromScale(-3, card2Scale), getTranslateFromScale(-2, card2Scale), getTranslateFromScale(-1, card1Scale), 0, sizeRef * 0.5],\n      extrapolate: 'clamp'\n    }))]\n  } : {\n    zIndex: carouselProps.data.length - index,\n    opacity: animatedValue.interpolate({\n      inputRange: [0, 1, 2, 3],\n      outputRange: opacityOutputRange,\n      extrapolate: 'clamp'\n    }),\n    transform: [{\n      scale: animatedValue.interpolate({\n        inputRange: [-1, 0, 1, 2],\n        outputRange: [card1Scale, 1, card1Scale, card2Scale],\n        extrapolate: 'clamp'\n      })\n    }, _defineProperty({}, translateProp, animatedValue.interpolate({\n      inputRange: [-1, 0, 1, 2, 3],\n      outputRange: [-sizeRef * 0.5, 0, getTranslateFromScale(1, card1Scale), getTranslateFromScale(2, card2Scale), getTranslateFromScale(3, card2Scale)],\n      extrapolate: 'clamp'\n    }))]\n  };\n}\nexport function tinderScrollInterpolator(index, carouselProps) {\n  var range = IS_ANDROID ? [1, 0, -1, -2, -3] : [3, 2, 1, 0, -1];\n  var inputRange = getInputRangeFromIndexes(range, index, carouselProps);\n  var outputRange = range;\n  return {\n    inputRange: inputRange,\n    outputRange: outputRange\n  };\n}\nexport function tinderAnimatedStyles(index, animatedValue, carouselProps, cardOffset) {\n  var sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;\n  var mainTranslateProp = carouselProps.vertical ? 'translateY' : 'translateX';\n  var secondaryTranslateProp = carouselProps.vertical ? 'translateX' : 'translateY';\n  var card1Scale = 0.96;\n  var card2Scale = 0.92;\n  var card3Scale = 0.88;\n  var peekingCardsOpacity = IS_ANDROID ? 0.92 : 1;\n  var newCardOffset = cardOffset !== null && cardOffset !== void 0 ? cardOffset : 9;\n\n  var getMainTranslateFromScale = function getMainTranslateFromScale(cardIndex, scale) {\n    var centerFactor = 1 / scale * cardIndex;\n    return -Math.round(sizeRef * centerFactor);\n  };\n\n  var getSecondaryTranslateFromScale = function getSecondaryTranslateFromScale(cardIndex, scale) {\n    return Math.round(newCardOffset * Math.abs(cardIndex) / scale);\n  };\n\n  return IS_ANDROID ? {\n    opacity: animatedValue.interpolate({\n      inputRange: [-3, -2, -1, 0, 1],\n      outputRange: [0, peekingCardsOpacity, peekingCardsOpacity, 1, 0],\n      extrapolate: 'clamp'\n    }),\n    transform: [{\n      scale: animatedValue.interpolate({\n        inputRange: [-3, -2, -1, 0],\n        outputRange: [card3Scale, card2Scale, card1Scale, 1],\n        extrapolate: 'clamp'\n      })\n    }, {\n      rotate: animatedValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: ['0deg', '22deg'],\n        extrapolate: 'clamp'\n      })\n    }, _defineProperty({}, mainTranslateProp, animatedValue.interpolate({\n      inputRange: [-3, -2, -1, 0, 1],\n      outputRange: [getMainTranslateFromScale(-3, card3Scale), getMainTranslateFromScale(-2, card2Scale), getMainTranslateFromScale(-1, card1Scale), 0, sizeRef * 1.1],\n      extrapolate: 'clamp'\n    })), _defineProperty({}, secondaryTranslateProp, animatedValue.interpolate({\n      inputRange: [-3, -2, -1, 0],\n      outputRange: [getSecondaryTranslateFromScale(-3, card3Scale), getSecondaryTranslateFromScale(-2, card2Scale), getSecondaryTranslateFromScale(-1, card1Scale), 0],\n      extrapolate: 'clamp'\n    }))]\n  } : {\n    zIndex: carouselProps.data.length - index,\n    opacity: animatedValue.interpolate({\n      inputRange: [-1, 0, 1, 2, 3],\n      outputRange: [0, 1, peekingCardsOpacity, peekingCardsOpacity, 0],\n      extrapolate: 'clamp'\n    }),\n    transform: [{\n      scale: animatedValue.interpolate({\n        inputRange: [0, 1, 2, 3],\n        outputRange: [1, card1Scale, card2Scale, card3Scale],\n        extrapolate: 'clamp'\n      })\n    }, {\n      rotate: animatedValue.interpolate({\n        inputRange: [-1, 0],\n        outputRange: ['-22deg', '0deg'],\n        extrapolate: 'clamp'\n      })\n    }, _defineProperty({}, mainTranslateProp, animatedValue.interpolate({\n      inputRange: [-1, 0, 1, 2, 3],\n      outputRange: [-sizeRef * 1.1, 0, getMainTranslateFromScale(1, card1Scale), getMainTranslateFromScale(2, card2Scale), getMainTranslateFromScale(3, card3Scale)],\n      extrapolate: 'clamp'\n    })), _defineProperty({}, secondaryTranslateProp, animatedValue.interpolate({\n      inputRange: [0, 1, 2, 3],\n      outputRange: [0, getSecondaryTranslateFromScale(1, card1Scale), getSecondaryTranslateFromScale(2, card2Scale), getSecondaryTranslateFromScale(3, card3Scale)],\n      extrapolate: 'clamp'\n    }))]\n  };\n}","map":{"version":3,"sources":["animations.ts"],"names":["IS_ANDROID","Platform","sizeRef","carouselProps","inputRange","i","range","index","getInputRangeFromIndexes","outputRange","animatedOpacity","animatedScale","opacity","transform","scale","animatedTranslate","translateProp","card1Scale","card2Scale","newCardOffset","cardOffset","getTranslateFromScale","centerFactor","centeredPosition","Math","edgeAlignment","offset","opacityOutputRange","extrapolate","zIndex","mainTranslateProp","secondaryTranslateProp","card3Scale","peekingCardsOpacity","getMainTranslateFromScale","getSecondaryTranslateFromScale","rotate"],"mappings":"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","sourcesContent":["import { Platform, Animated } from 'react-native';\nimport type { CarouselProps } from 'src/carousel/types';\n\nconst IS_ANDROID = Platform.OS === 'android';\n\n// Get scroll interpolator's input range from an array of slide indexes\n// Indexes are relative to the current active slide (index 0)\n// For example, using [3, 2, 1, 0, -1] will return:\n// [\n//     (index - 3) * sizeRef, // active + 3\n//     (index - 2) * sizeRef, // active + 2\n//     (index - 1) * sizeRef, // active + 1\n//     index * sizeRef, // active\n//     (index + 1) * sizeRef // active - 1\n// ]\nexport function getInputRangeFromIndexes<TData> (\n    range: number[],\n    index: number,\n    carouselProps: CarouselProps<TData>\n) {\n    const sizeRef = carouselProps.vertical ?\n        carouselProps.itemHeight :\n        carouselProps.itemWidth;\n    const inputRange = [];\n\n    for (let i = 0; i < range.length; i++) {\n        inputRange.push((index - range[i]) * sizeRef);\n    }\n\n    return inputRange;\n}\n\n// Default behavior\n// Scale and/or opacity effect\n// Based on props 'inactiveSlideOpacity' and 'inactiveSlideScale'\nexport function defaultScrollInterpolator<TData> (\n    index: number,\n    carouselProps: CarouselProps<TData>\n) {\n    const range = [1, 0, -1];\n    const inputRange = getInputRangeFromIndexes(range, index, carouselProps);\n    const outputRange = [0, 1, 0];\n\n    return { inputRange, outputRange };\n}\nexport function defaultAnimatedStyles<TData> (\n    _index: number,\n    animatedValue: Animated.AnimatedInterpolation,\n    carouselProps: CarouselProps<TData>\n) {\n    let animatedOpacity = {};\n    let animatedScale = {};\n\n    if (carouselProps.inactiveSlideOpacity < 1) {\n        animatedOpacity = {\n            opacity: animatedValue.interpolate({\n                inputRange: [0, 1],\n                outputRange: [carouselProps.inactiveSlideOpacity, 1]\n            })\n        };\n    }\n\n    if (carouselProps.inactiveSlideScale < 1) {\n        animatedScale = {\n            transform: [\n                {\n                    scale: animatedValue.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [carouselProps.inactiveSlideScale, 1]\n                    })\n                }\n            ]\n        };\n    }\n\n    return {\n        ...animatedOpacity,\n        ...animatedScale\n    };\n}\n\n// Shift animation\n// Same as the default one, but the active slide is also shifted up or down\n// Based on prop 'inactiveSlideShift'\nexport function shiftAnimatedStyles<TData> (\n    _index: number,\n    animatedValue: Animated.AnimatedInterpolation,\n    carouselProps: CarouselProps<TData>\n) {\n    let animatedOpacity = {};\n    let animatedScale = {};\n    let animatedTranslate = {};\n\n    if (carouselProps.inactiveSlideOpacity < 1) {\n        animatedOpacity = {\n            opacity: animatedValue.interpolate({\n                inputRange: [0, 1],\n                outputRange: [carouselProps.inactiveSlideOpacity, 1]\n            })\n        };\n    }\n\n    if (carouselProps.inactiveSlideScale < 1) {\n        animatedScale = {\n            scale: animatedValue.interpolate({\n                inputRange: [0, 1],\n                outputRange: [carouselProps.inactiveSlideScale, 1]\n            })\n        };\n    }\n\n    if (carouselProps.inactiveSlideShift !== 0) {\n        const translateProp = carouselProps.vertical ? 'translateX' : 'translateY';\n        animatedTranslate = {\n            [translateProp]: animatedValue.interpolate({\n                inputRange: [0, 1],\n                outputRange: [carouselProps.inactiveSlideShift, 0]\n            })\n        };\n    }\n\n    return {\n        ...animatedOpacity,\n        transform: [{ ...animatedScale }, { ...animatedTranslate }]\n    };\n}\n\n// Stack animation\n// Imitate a deck/stack of cards (see #195)\n// WARNING: The effect had to be visually inverted on Android because this OS doesn't honor the `zIndex`property\n// This means that the item with the higher zIndex (and therefore the tap receiver) remains the one AFTER the currently active item\n// The `elevation` property compensates for that only visually, which is not good enough\nexport function stackScrollInterpolator<TData> (\n    index: number,\n    carouselProps: CarouselProps<TData>\n) {\n    const range = IS_ANDROID ? [1, 0, -1, -2, -3] : [3, 2, 1, 0, -1];\n    const inputRange = getInputRangeFromIndexes(range, index, carouselProps);\n    const outputRange = range;\n\n    return { inputRange, outputRange };\n}\nexport function stackAnimatedStyles<TData> (\n    index: number,\n    animatedValue: Animated.AnimatedInterpolation,\n    carouselProps: CarouselProps<TData>,\n    cardOffset?: number\n) {\n    const sizeRef = carouselProps.vertical ?\n        carouselProps.itemHeight :\n        carouselProps.itemWidth;\n    const translateProp = carouselProps.vertical ? 'translateY' : 'translateX';\n\n    const card1Scale = 0.9;\n    const card2Scale = 0.8;\n\n    const newCardOffset = cardOffset ?? 18;\n\n    const getTranslateFromScale = (cardIndex: number, scale: number) => {\n        const centerFactor = (1 / scale) * cardIndex;\n        const centeredPosition = -Math.round(sizeRef * centerFactor);\n        const edgeAlignment = Math.round((sizeRef - sizeRef * scale) / 2);\n        const offset = Math.round((newCardOffset * Math.abs(cardIndex)) / scale);\n\n        return IS_ANDROID ?\n            centeredPosition - edgeAlignment - offset :\n            centeredPosition + edgeAlignment + offset;\n    };\n\n    const opacityOutputRange =\n    carouselProps.inactiveSlideOpacity === 1 ? [1, 1, 1, 0] : [1, 0.75, 0.5, 0];\n\n    return IS_ANDROID ?\n        {\n        // elevation: carouselProps.data.length - index, // fix zIndex bug visually, but not from a logic point of view\n            opacity: animatedValue.interpolate({\n                inputRange: [-3, -2, -1, 0],\n                outputRange: opacityOutputRange.reverse(),\n                extrapolate: 'clamp'\n            }),\n            transform: [\n                {\n                    scale: animatedValue.interpolate({\n                        inputRange: [-2, -1, 0, 1],\n                        outputRange: [card2Scale, card1Scale, 1, card1Scale],\n                        extrapolate: 'clamp'\n                    })\n                },\n                {\n                    [translateProp]: animatedValue.interpolate({\n                        inputRange: [-3, -2, -1, 0, 1],\n                        outputRange: [\n                            getTranslateFromScale(-3, card2Scale),\n                            getTranslateFromScale(-2, card2Scale),\n                            getTranslateFromScale(-1, card1Scale),\n                            0,\n                            sizeRef * 0.5\n                        ],\n                        extrapolate: 'clamp'\n                    })\n                }\n            ]\n        } :\n        {\n            zIndex: carouselProps.data.length - index,\n            opacity: animatedValue.interpolate({\n                inputRange: [0, 1, 2, 3],\n                outputRange: opacityOutputRange,\n                extrapolate: 'clamp'\n            }),\n            transform: [\n                {\n                    scale: animatedValue.interpolate({\n                        inputRange: [-1, 0, 1, 2],\n                        outputRange: [card1Scale, 1, card1Scale, card2Scale],\n                        extrapolate: 'clamp'\n                    })\n                },\n                {\n                    [translateProp]: animatedValue.interpolate({\n                        inputRange: [-1, 0, 1, 2, 3],\n                        outputRange: [\n                            -sizeRef * 0.5,\n                            0,\n                            getTranslateFromScale(1, card1Scale),\n                            getTranslateFromScale(2, card2Scale),\n                            getTranslateFromScale(3, card2Scale)\n                        ],\n                        extrapolate: 'clamp'\n                    })\n                }\n            ]\n        };\n}\n\n// Tinder animation\n// Imitate the popular Tinder layout\n// WARNING: The effect had to be visually inverted on Android because this OS doesn't honor the `zIndex`property\n// This means that the item with the higher zIndex (and therefore the tap receiver) remains the one AFTER the currently active item\n// The `elevation` property compensates for that only visually, which is not good enough\nexport function tinderScrollInterpolator<TData> (\n    index: number,\n    carouselProps: CarouselProps<TData>\n) {\n    const range = IS_ANDROID ? [1, 0, -1, -2, -3] : [3, 2, 1, 0, -1];\n    const inputRange = getInputRangeFromIndexes(range, index, carouselProps);\n    const outputRange = range;\n\n    return { inputRange, outputRange };\n}\nexport function tinderAnimatedStyles<TData> (\n    index: number,\n    animatedValue: Animated.AnimatedInterpolation,\n    carouselProps: CarouselProps<TData>,\n    cardOffset?: number\n) {\n    const sizeRef = carouselProps.vertical ?\n        carouselProps.itemHeight :\n        carouselProps.itemWidth;\n    const mainTranslateProp = carouselProps.vertical ?\n        'translateY' :\n        'translateX';\n    const secondaryTranslateProp = carouselProps.vertical ?\n        'translateX' :\n        'translateY';\n\n    const card1Scale = 0.96;\n    const card2Scale = 0.92;\n    const card3Scale = 0.88;\n\n    const peekingCardsOpacity = IS_ANDROID ? 0.92 : 1;\n\n    const newCardOffset = cardOffset ?? 9;\n\n    const getMainTranslateFromScale = (cardIndex: number, scale: number) => {\n        const centerFactor = (1 / scale) * cardIndex;\n        return -Math.round(sizeRef * centerFactor);\n    };\n\n    const getSecondaryTranslateFromScale = (cardIndex: number, scale: number) => {\n        return Math.round((newCardOffset * Math.abs(cardIndex)) / scale);\n    };\n\n    return IS_ANDROID ?\n        {\n        // elevation: carouselProps.data.length - index, // fix zIndex bug visually, but not from a logic point of view\n            opacity: animatedValue.interpolate({\n                inputRange: [-3, -2, -1, 0, 1],\n                outputRange: [0, peekingCardsOpacity, peekingCardsOpacity, 1, 0],\n                extrapolate: 'clamp'\n            }),\n            transform: [\n                {\n                    scale: animatedValue.interpolate({\n                        inputRange: [-3, -2, -1, 0],\n                        outputRange: [card3Scale, card2Scale, card1Scale, 1],\n                        extrapolate: 'clamp'\n                    })\n                },\n                {\n                    rotate: animatedValue.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: ['0deg', '22deg'],\n                        extrapolate: 'clamp'\n                    })\n                },\n                {\n                    [mainTranslateProp]: animatedValue.interpolate({\n                        inputRange: [-3, -2, -1, 0, 1],\n                        outputRange: [\n                            getMainTranslateFromScale(-3, card3Scale),\n                            getMainTranslateFromScale(-2, card2Scale),\n                            getMainTranslateFromScale(-1, card1Scale),\n                            0,\n                            sizeRef * 1.1\n                        ],\n                        extrapolate: 'clamp'\n                    })\n                },\n                {\n                    [secondaryTranslateProp]: animatedValue.interpolate({\n                        inputRange: [-3, -2, -1, 0],\n                        outputRange: [\n                            getSecondaryTranslateFromScale(-3, card3Scale),\n                            getSecondaryTranslateFromScale(-2, card2Scale),\n                            getSecondaryTranslateFromScale(-1, card1Scale),\n                            0\n                        ],\n                        extrapolate: 'clamp'\n                    })\n                }\n            ]\n        } :\n        {\n            zIndex: carouselProps.data.length - index,\n            opacity: animatedValue.interpolate({\n                inputRange: [-1, 0, 1, 2, 3],\n                outputRange: [0, 1, peekingCardsOpacity, peekingCardsOpacity, 0],\n                extrapolate: 'clamp'\n            }),\n            transform: [\n                {\n                    scale: animatedValue.interpolate({\n                        inputRange: [0, 1, 2, 3],\n                        outputRange: [1, card1Scale, card2Scale, card3Scale],\n                        extrapolate: 'clamp'\n                    })\n                },\n                {\n                    rotate: animatedValue.interpolate({\n                        inputRange: [-1, 0],\n                        outputRange: ['-22deg', '0deg'],\n                        extrapolate: 'clamp'\n                    })\n                },\n                {\n                    [mainTranslateProp]: animatedValue.interpolate({\n                        inputRange: [-1, 0, 1, 2, 3],\n                        outputRange: [\n                            -sizeRef * 1.1,\n                            0,\n                            getMainTranslateFromScale(1, card1Scale),\n                            getMainTranslateFromScale(2, card2Scale),\n                            getMainTranslateFromScale(3, card3Scale)\n                        ],\n                        extrapolate: 'clamp'\n                    })\n                },\n                {\n                    [secondaryTranslateProp]: animatedValue.interpolate({\n                        inputRange: [0, 1, 2, 3],\n                        outputRange: [\n                            0,\n                            getSecondaryTranslateFromScale(1, card1Scale),\n                            getSecondaryTranslateFromScale(2, card2Scale),\n                            getSecondaryTranslateFromScale(3, card3Scale)\n                        ],\n                        extrapolate: 'clamp'\n                    })\n                }\n            ]\n        };\n}\n"]},"metadata":{},"sourceType":"module"}